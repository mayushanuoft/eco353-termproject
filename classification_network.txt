import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load and preprocess data
data_path = '/Users/mayushanmayurathan/Documents/eco353/corporate_credit_risk.csv'  # Update this path
data = pd.read_csv(data_path)
X = data.drop(['Num', 'Default'], axis=1).values  # Assuming 'Num' is an identifier
y = data['Default'].values
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Helper functions
def initialize_parameters(layer_dims):
    np.random.seed(42)
    parameters = {}
    L = len(layer_dims)
    for l in range(1, L):
        parameters['W' + str(l)] = np.random.randn(layer_dims[l], layer_dims[l-1]) * 0.01
        parameters['b' + str(l)] = np.zeros((layer_dims[l], 1))
    return parameters

def relu(Z):
    return np.maximum(0, Z)

def sigmoid(Z):
    return 1 / (1 + np.exp(-Z))

def compute_cost(AL, Y):
    m = Y.shape[0]
    cost = -np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL)) / m
    return cost

def relu_backward(dA, Z):
    dZ = np.array(dA, copy=True)
    dZ[Z <= 0] = 0
    return dZ

def sigmoid_backward(dA, Z):
    s = 1/(1+np.exp(-Z))
    dZ = dA * s * (1-s)
    return dZ

def forward_propagation(X, parameters):
    caches = []
    A = X.T
    L = len(parameters) // 2
    for l in range(1, L):
        A_prev = A
        W = parameters['W' + str(l)]
        b = parameters['b' + str(l)]
        Z = np.dot(W, A_prev) + b
        A = relu(Z)
        caches.append((A_prev, W, b, Z))
    W = parameters['W' + str(L)]
    b = parameters['b' + str(L)]
    Z = np.dot(W, A) + b
    AL = sigmoid(Z)
    caches.append((A, W, b, Z))
    return AL, caches

def backward_propagation(AL, Y, caches):
    grads = {}
    L = len(caches)
    m = AL.shape[1]
    Y = Y.reshape(AL.shape)
    dAL = - (np.divide(Y, AL) - np.divide(1 - Y, 1 - AL))
    current_cache = caches[L-1]
    A_prev, W, b, Z = current_cache
    dZ = sigmoid_backward(dAL, Z)
    dW = np.dot(dZ, A_prev.T) / m
    db = np.sum(dZ, axis=1, keepdims=True) / m
    dA_prev = np.dot(W.T, dZ)
    grads["dW" + str(L)] = dW
    grads["db" + str(L)] = db
    for l in reversed(range(L-1)):
        current_cache = caches[l]
        A_prev, W, b, Z = current_cache
        dZ = relu_backward(dA_prev, Z)
        dW = np.dot(dZ, A_prev.T) / m
        db = np.sum(dZ, axis=1, keepdims=True) / m
        if l > 0:
            dA_prev = np.dot(W.T, dZ)
        grads["dW" + str(l + 1)] = dW
        grads["db" + str(l + 1)] = db
    return grads

def update_parameters(parameters, grads, learning_rate):
    L = len(parameters) // 2
    for l in range(L):
        parameters["W" + str(l+1)] -= learning_rate * grads["dW" + str(l+1)]
        parameters["b" + str(l+1)] -= learning_rate * grads["db" + str(l+1)]
    return parameters

# Neural network model
def neural_network_model(X, Y, layers_dims, learning_rate=0.0075, num_iterations=3000, print_cost=True):
    np.random.seed(1)
    costs = []
    parameters = initialize_parameters(layers_dims)
    for i in range(0, num_iterations):
        AL, caches = forward_propagation(X, parameters)
        cost = compute_cost(AL, Y)
        grads = backward_propagation(AL, Y, caches)
        parameters = update_parameters(parameters, grads, learning_rate)
        if print_cost and i % 100 == 0:
            print ("Cost after iteration %i: %f" %(i, cost))
            costs.append(cost)
    return parameters

# Function to predict probabilities
def predict(X, parameters):
    AL, _ = forward_propagation(X, parameters)
    return AL.T  # Transpose to get predictions in proper shape

# Training the model
layers_dims = [74, 64, 32, 1]  # Example layer dimensions
parameters = neural_network_model(X_train, y_train, layers_dims, num_iterations=2000)

# Predicting the probabilities on the test set
probabilities = predict(X_test, parameters)

# # Printing the model parameters
# print("Model parameters after training:")
# for key in parameters:
#     print(f"{key}: {parameters[key]}")

# Saving the model parameters to a file
np.savez("trained_model_parameters.npz", **parameters)

# Inform the user
print("Model parameters have been saved to 'trained_model_parameters.npz'")

